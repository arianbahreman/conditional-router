<?php namespace ConditionalRouter;

use Exception;
use InvalidArgumentException;
use Laminas\Diactoros\Response\EmptyResponse;
use Laminas\Diactoros\Response\HtmlResponse;
use Psr\Http\Message\ResponseInterface;
use Psr\Http\Message\ServerRequestInterface;

/**
 * Class ConditionalRouter
 * 
 * Handles conditional routing based on predefined rules and executes the corresponding controller.
 */
class ConditionalRouter {
  /**
   * @var bool $matched Indicates whether a route has been matched and executed.
   */
  private bool $matched = false;

  /**
   * @var ServerRequestInterface The current HTTP request instance.
   */
  private ServerRequestInterface $request;

  /**
   * @var ResponseInterface|null Holds the response generated by the matched route.
   */
  private ?ResponseInterface $response = null;

  /**
   * Constructor initializes the router with an optional request.
   *
   * @param ServerRequestInterface|null $request The incoming HTTP request.
   */
  public function __construct(ServerRequestInterface $request = null) {
    $this->request = $request;
  }

  /**
   * Executes the provided controller if no route has been matched yet.
   *
   * @param mixed $controller The controller to execute.
   */
  private function execute($controller): void {
    if ($this->matched) {
      return;
    }

    if (!($controller instanceof Controller)) {
      $controller = new Controller($controller);
    }

    $this->matched = true;

    try {
      $response = $controller->execute($this->request);

      if ($response instanceof ResponseInterface) {
        $this->response = $response;
      } elseif (is_string($response)) {
        $this->response = new HtmlResponse($response);
      }
    } catch(Exception $error) {
      $this->response = null;
    }
  }

  /**
   * Retrieves the response generated by the executed controller.
   *
   * @return ResponseInterface The response from the executed route.
   */
  public function getResponse(): ResponseInterface {
    if (! $this->response) {
      return new EmptyResponse(500);
    }

    return $this->response;
  }

  /**
   * Adds a conditional route and executes the controller if the condition matches.
   *
   * @param ConditionalRoute $route The route condition to evaluate.
   * @param string|callable $controller The controller to execute if the condition is met.
   * @return bool Returns false if a route has already been matched.
   */
  public function addRoute(ConditionalRoute $route, string | callable | Controller $controller) {
    if ($this->matched) {
      return false;
    }

    if ($route->matches($this->request)) {
      $this->execute($controller);
    }
  }
}